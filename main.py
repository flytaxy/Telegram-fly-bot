import os
import logging
import openrouteservice
from dotenv import load_dotenv
from aiogram import Bot, Dispatcher, types, Router
from aiogram.enums import ContentType
from aiogram.filters import Command
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
import asyncio

# –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑–º—ñ–Ω–Ω–∏—Ö —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
load_dotenv()
ORS_API_KEY = os.getenv("ORS_API_KEY")
BOT_TOKEN = os.getenv("BOT_TOKEN")

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()
router = Router()
dp.include_router(router)
user_locations = {}

# –õ–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(level=logging.INFO)

# /start
@dp.message_handler(commands=["start"])
async def send_welcome(message: types.Message):
    location_button = KeyboardButton(
        text="üìç –ù–∞–¥—ñ—Å–ª–∞—Ç–∏ –ª–æ–∫–∞—Ü—ñ—é",
        request_location=True
    )

    keyboard = ReplyKeyboardMarkup(
        keyboard=[[location_button]],
        resize_keyboard=True
    )

    await message.answer(
        "–ü—Ä–∏–≤—ñ—Ç! –ù–∞–¥—ñ—à–ª–∏ —Å–≤–æ—é –ª–æ–∫–∞—Ü—ñ—é, —â–æ–± –≤–∏–∫–ª–∏–∫–∞—Ç–∏ —Ç–∞–∫—Å—ñ üöï",
        reply_markup=keyboard

# –õ–æ–∫–∞—Ü—ñ—è
@dp.message(lambda m: m.content_type == ContentType.LOCATION)
async def handle_location(message: types.Message):
    user_id = message.from_user.id
    latitude = message.location.latitude
    longitude = message.location.longitude

    user_locations[user_id] = {"lat": latitude, "lon": longitude}

    await message.answer(
        f"–ú–∏ –æ—Ç—Ä–∏–º–∞–ª–∏ —Ç–≤–æ—é –ª–æ–∫–∞—Ü—ñ—é:\n–®–∏—Ä–æ—Ç–∞: {latitude}\n–î–æ–≤–≥–æ—Ç–∞: {longitude}\n"
        "–¢–µ–ø–µ—Ä –Ω–∞–¥—ñ—à–ª–∏ –∞–¥—Ä–µ—Å—É –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è üì¨",
        reply_markup=ReplyKeyboardRemove()
    )

# –ê–¥—Ä–µ—Å–∞
@dp.message(lambda m: m.content_type == ContentType.TEXT)
async def handle_destination(message: types.Message):
    user_id = message.from_user.id
    destination = message.text

    if user_id not in user_locations:
        await message.answer("–°–ø–æ—á–∞—Ç–∫—É –Ω–∞–¥—ñ—à–ª–∏ —Å–≤–æ—é –ª–æ–∫–∞—Ü—ñ—é üìç")
        return

    start = user_locations[user_id]
    await message.answer(f"üì¶ –ü—É–Ω–∫—Ç –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è: {destination}\n–ü–æ—á–∞—Ç–∫–æ–≤–∞ —Ç–æ—á–∫–∞: {start['lat']}, {start['lon']}")

    route = get_route(start_coords=start, end_coords=start)  # –ü–æ–∫–∏ —Ç–µ—Å—Ç
    # –¢–∏ –º–æ–∂–µ—à –¥–æ–¥–∞—Ç–∏ –≤–∏–≤—ñ–¥ –º–∞—Ä—à—Ä—É—Ç—É —Ç—É—Ç

def get_route(start_coords, end_coords):
    client = openrouteservice.Client(key=ORS_API_KEY)
    route = client.directions(
        coordinates=[start_coords, end_coords],
        profile='driving-car',
        format='geojson'
    )
    return route

# –ó–∞–ø—É—Å–∫
async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())