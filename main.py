import logging
import os
import requests
from aiogram import Bot, Dispatcher, F
from aiogram.types import Message, Location, FSInputFile
from aiogram.enums import ParseMode
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from dotenv import load_dotenv

load_dotenv()

BOT_TOKEN = os.getenv("BOT_TOKEN")
ORS_API_KEY = os.getenv("ORS_API_KEY")

bot = Bot(token=BOT_TOKEN, parse_mode=ParseMode.HTML)
dp = Dispatcher(storage=MemoryStorage())

logging.basicConfig(level=logging.INFO)

class OrderTaxi(StatesGroup):
    waiting_for_location = State()
    waiting_for_destination = State()

@dp.message(F.text == "/start")
async def cmd_start(message: Message, state: FSMContext):
    keyboard = ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text="üìç –ù–∞–¥—ñ—Å–ª–∞—Ç–∏ –ª–æ–∫–∞—Ü—ñ—é", request_location=True)]],
        resize_keyboard=True
    )
    await message.answer("–ü—Ä–∏–≤—ñ—Ç! –ù–∞–¥—ñ—à–ª–∏ —Å–≤–æ—é –ª–æ–∫–∞—Ü—ñ—é, —â–æ–± –ø–æ—á–∞—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è —Ç–∞–∫—Å—ñ:", reply_markup=keyboard)
    await state.set_state(OrderTaxi.waiting_for_location)

@dp.message(OrderTaxi.waiting_for_location, F.location)
async def process_location(message: Message, state: FSMContext):
    await state.update_data(location=message.location)
    await message.answer("–¢–µ–ø–µ—Ä –≤–≤–µ–¥–∏ –∞–¥—Ä–µ—Å—É –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: –•—Ä–µ—â–∞—Ç–∏–∫ 22, –ö–∏—ó–≤):", reply_markup=ReplyKeyboardMarkup(keyboard=[], resize_keyboard=True))
    await state.set_state(OrderTaxi.waiting_for_destination)

@dp.message(OrderTaxi.waiting_for_destination)
async def process_destination(message: Message, state: FSMContext):
    user_data = await state.get_data()
    location = user_data["location"]
    start_coords = [location.longitude, location.latitude]

    destination_text = message.text

    # –ì–µ–æ–∫–æ–¥—É–≤–∞–Ω–Ω—è
    geo_url = f"https://api.openrouteservice.org/geocode/search?api_key={ORS_API_KEY}&text={destination_text}&boundary.country=UA"
    geo_response = requests.get(geo_url).json()

    if not geo_response.get("features"):
        await message.answer("–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ –∞–¥—Ä–µ—Å—É. –°–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑.")
        return

    end_coords = geo_response["features"][0]["geometry"]["coordinates"]

    # –ü–æ–±—É–¥–æ–≤–∞ –º–∞—Ä—à—Ä—É—Ç—É
   route_url = "https://api.openrouteservice.org/v2/directions/driving-car"
headers = {
    "Authorization": ORS_API_KEY,
    "Content-Type": "application/json"
}
payload = {
    "coordinates": [start_coords, end_coords],
    "instructions": False,  # –ø—Ä–∏–±–∏—Ä–∞—î–º–æ —Ç–µ–∫—Å—Ç–æ–≤—ñ —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—ó, —â–æ–± –Ω–µ –∑–ª–∞–º–∞–ª–æ—Å—å
}
response = requests.post(route_url, json=payload, headers=headers)

if response.status_code != 200:
    await message.answer(f"‚ùå OpenRouteService –ø–æ–≤–µ—Ä–Ω—É–≤ –ø–æ–º–∏–ª–∫—É: {response.status_code}\n{response.text}")
    return

route_response = response.json()

    try:
        segment = route_response["features"][0]["properties"]["segments"][0]
        distance_km = round(segment["distance"] / 1000, 2)
        duration_min = round(segment["duration"] / 60, 1)
    except Exception:
        await message.answer("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–æ–±—É–¥–æ–≤—ñ –º–∞—Ä—à—Ä—É—Ç—É.")
        return

    # –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –º–∞—Ä—à—Ä—É—Ç—É
    coords_str = f"{start_coords[0]},{start_coords[1]}|{end_coords[0]},{end_coords[1]}"
    map_url = f"https://api.openrouteservice.org/maps/staticmap?api_key={ORS_API_KEY}&layer=mapnik&size=600x400&markers={coords_str}&path={coords_str}"

    try:
        map_img = requests.get(map_url)
        map_path = "route_map.png"
        with open(map_path, "wb") as f:
            f.write(map_img.content)
        photo = FSInputFile(map_path)
        await bot.send_photo(message.chat.id, photo, caption=(
            f"<b>–ú–∞—Ä—à—Ä—É—Ç –ø–æ–±—É–¥–æ–≤–∞–Ω–æ!</b> üó∫Ô∏è\n"
            f"–í—ñ–¥—Å—Ç–∞–Ω—å: <b>{distance_km} –∫–º</b>\n"
            f"–û—Ä—ñ—î–Ω—Ç–æ–≤–Ω–∏–π —á–∞—Å: <b>{duration_min} —Ö–≤</b>"
        ), parse_mode="HTML")
        os.remove(map_path)
    except Exception:
        await message.answer("–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –∫–∞—Ä—Ç—É –º–∞—Ä—à—Ä—É—Ç—É, –∞–ª–µ –≤—ñ–¥—Å—Ç–∞–Ω—å: "
                             f"{distance_km} –∫–º, —á–∞—Å: {duration_min} —Ö–≤")

    await state.clear()

if __name__ == "__main__":
    import asyncio
    asyncio.run(dp.start_polling(bot))