import os
import logging
import requests
import folium
from datetime import datetime, time

from aiogram import Bot, Dispatcher, types
from aiogram.enums import ParseMode
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove, FSInputFile
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from geopy.geocoders import Nominatim
from dotenv import load_dotenv

# –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è .env
load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")
ORS_API_KEY = os.getenv("ORS_API_KEY")

# –õ–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(level=logging.INFO)

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è
bot = Bot(token=BOT_TOKEN, parse_mode=ParseMode.HTML)
dp = Dispatcher(storage=MemoryStorage())
geolocator = Nominatim(user_agent="flytaxi")

# –°—Ç–∞–Ω
class OrderTaxi(StatesGroup):
    waiting_for_location = State()
    waiting_for_address = State()
    waiting_for_car_class = State()

# –§—É–Ω–∫—Ü—ñ—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –ø—ñ–∫–æ–≤–æ–≥–æ —á–∞—Å—É
def is_peak_hour():
    now = datetime.now().time()
    return (
        time(7, 0) <= now <= time(10, 0) or
        time(17, 0) <= now <= time(20, 0)
    )

# –°—Ç–∞—Ä—Ç
@dp.message(commands=["start"])
async def start(message: types.Message, state: FSMContext):
    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add(KeyboardButton(text="üìç –ü–æ–¥—ñ–ª–∏—Ç–∏—Å—å –ª–æ–∫–∞—Ü—ñ—î—é", request_location=True))
    await message.answer("–ü—Ä–∏–≤—ñ—Ç! –ù–∞–¥—ñ—à–ª–∏ —Å–≤–æ—é –ª–æ–∫–∞—Ü—ñ—é, —â–æ–± –∑–∞–º–æ–≤–∏—Ç–∏ —Ç–∞–∫—Å—ñ:", reply_markup=kb)
    await state.set_state(OrderTaxi.waiting_for_location)

# –õ–æ–∫–∞—Ü—ñ—è
@dp.message(OrderTaxi.waiting_for_location)
async def process_location(message: types.Message, state: FSMContext):
    if not message.location:
        await message.answer("–ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞—Ç–∏—Å–Ω–∏ –∫–Ω–æ–ø–∫—É '–ü–æ–¥—ñ–ª–∏—Ç–∏—Å—å –ª–æ–∫–∞—Ü—ñ—î—é'")
        return

    await state.update_data(location=message.location)
    await message.answer("–¢–µ–ø–µ—Ä –≤–≤–µ–¥–∏ –∞–¥—Ä–µ—Å—É –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: –•—Ä–µ—â–∞—Ç–∏–∫ 22, –ö–∏—ó–≤):", reply_markup=ReplyKeyboardRemove())
    await state.set_state(OrderTaxi.waiting_for_address)

# –ê–¥—Ä–µ—Å–∞
@dp.message(OrderTaxi.waiting_for_address)
async def process_destination(message: types.Message, state: FSMContext):
    user_data = await state.get_data()
    location = user_data.get("location")

try:
        destination = geolocator.geocode(message.text)
        if not destination:
            await message.answer("‚ùå –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ —Ç–∞–∫—É –∞–¥—Ä–µ—Å—É. –°–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑.")
            return

        start_coords = [location.longitude, location.latitude]
        end_coords = [destination.longitude, destination.latitude]

        # –ü–æ–±—É–¥–æ–≤–∞ –º–∞—Ä—à—Ä—É—Ç—É
        route_url = "https://api.openrouteservice.org/v2/directions/driving-car"
        headers = {
            "Authorization": ORS_API_KEY,
            "Content-Type": "application/json"
        }
        payload = {
            "coordinates": [start_coords, end_coords],
            "instructions": False
        }

        response = requests.post(route_url, json=payload, headers=headers)
        if response.status_code != 200:
            await message.answer(f"‚ùå OpenRouteService –ø–æ–≤–µ—Ä–Ω—É–≤ –ø–æ–º–∏–ª–∫—É: {response.status_code}\n{response.text}")
            return

        route_response = response.json()
        geometry = route_response["features"][0]["geometry"]["coordinates"]
        distance_km = round(route_response["features"][0]["properties"]["segments"][0]["distance"] / 1000, 2)
        duration_min = round(route_response["features"][0]["properties"]["segments"][0]["duration"] / 60)

        # –ú–∞–ø–∞
        m = folium.Map(location=[start_coords[1], start_coords[0]], zoom_start=13)
        folium.Marker(location=[start_coords[1], start_coords[0]], tooltip="–ü–æ—á–∞—Ç–æ–∫").add_to(m)
        folium.Marker(location=[end_coords[1], end_coords[0]], tooltip="–ö—ñ–Ω–µ—Ü—å").add_to(m)
        folium.PolyLine([(coord[1], coord[0]) for coord in geometry], color="blue", weight=5).add_to(m)

        map_path = "route_map.png"
        m.save("route.html")
        os.system(f"wkhtmltoimage --quality 80 route.html {map_path}")

–°–µ—Ä–≥—ñ–π –í—ñ–∫—Ç–æ—Ä–æ–≤–∏—á, [03.07.2025 7:46]
await state.update_data(
            distance_km=distance_km,
            duration_min=duration_min,
            map_path=map_path
        )

        await message.answer(
            f"üìç –ú–∞—Ä—à—Ä—É—Ç –∑–Ω–∞–π–¥–µ–Ω–æ!\n"
            f"üìè –í—ñ–¥—Å—Ç–∞–Ω—å: <b>{distance_km}</b> –∫–º\n"
            f"‚è±Ô∏è –ß–∞—Å: <b>{duration_min}</b> —Ö–≤\n\n"
            "üöò –û–±–µ—Ä–∏ –∫–ª–∞—Å –∞–≤—Ç–æ:",
            reply_markup=ReplyKeyboardMarkup(
                keyboard=[
                    [KeyboardButton(text="üöó –°—Ç–∞–Ω–¥–∞—Ä—Ç"), KeyboardButton(text="üöô –ö–æ–º—Ñ–æ—Ä—Ç"), KeyboardButton(text="üöò –ë—ñ–∑–Ω–µ—Å")]
                ],
                resize_keyboard=True,
                one_time_keyboard=True
            ),
            parse_mode="HTML"
        )

        await state.set_state(OrderTaxi.waiting_for_car_class)

    except Exception as e:
        await message.answer(f"‚ÄºÔ∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –ø–æ–±—É–¥—É–≤–∞—Ç–∏ –º–∞—Ä—à—Ä—É—Ç.\n–ü–æ–º–∏–ª–∫–∞: {str(e)}")
        await state.clear()

# –í–∏–±—ñ—Ä –∫–ª–∞—Å—É –∞–≤—Ç–æ
@dp.message(OrderTaxi.waiting_for_car_class)
async def process_car_class(message: types.Message, state: FSMContext):
    car_class_text = message.text.strip().lower()
    user_data = await state.get_data()
    distance = user_data.get("distance_km")
    duration = user_data.get("duration_min")
    map_path = user_data.get("map_path")

    peak = is_peak_hour()

    if "—Å—Ç–∞–Ω–¥–∞—Ä—Ç" in car_class_text or "–µ–∫–æ–Ω–æ–º" in car_class_text:
        car_class = "–°—Ç–∞–Ω–¥–∞—Ä—Ç"
        base = 150 if peak else 120
        per_km = 25 if peak else 20
        included_km = 2.0

    elif "–∫–æ–º—Ñ–æ—Ä—Ç" in car_class_text:
        car_class = "–ö–æ–º—Ñ–æ—Ä—Ç"
        base = 150
        per_km = 27 if peak else 23
        included_km = 2.5

    elif "–±—ñ–∑–Ω–µ—Å" in car_class_text:
        car_class = "–ë—ñ–∑–Ω–µ—Å"
        base = 230 if peak else 180
        per_km = 32 if peak else 27
        included_km = 2.5

    else:
        await message.answer("‚ùå –ë—É–¥—å –ª–∞—Å–∫–∞, –æ–±–µ—Ä–∏ –≤–∞—Ä—ñ–∞–Ω—Ç –∑ –∫–Ω–æ–ø–æ–∫.")
        return

    # –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫
    billable_km = max(0, distance - included_km)
    total_price = round(base + billable_km * per_km)

    caption = (
        f"<b>üöñ –ö–ª–∞—Å:</b> {car_class}\n"
        f"<b>üìè –í—ñ–¥—Å—Ç–∞–Ω—å:</b> {distance} –∫–º (–≤–∫–ª—é—á–µ–Ω–æ {included_km} –∫–º —É –ø–æ–¥–∞—á—É)\n"
        f"<b>üí≥ –ü–ª–∞—Ç–Ω–∞ –≤—ñ–¥—Å—Ç–∞–Ω—å:</b> {round(billable_km, 2)} –∫–º\n"
        f"<b>‚è±Ô∏è –ß–∞—Å:</b> {duration} —Ö–≤\n"
        f"<b>üí∞ –í–∞—Ä—Ç—ñ—Å—Ç—å:</b> {total_price} ‚Ç¥\n"
    )

    if peak:
        caption += "‚ö†Ô∏è <i>–ü—ñ–∫–æ–≤–∏–π —Ç–∞—Ä–∏—Ñ –∑–∞—Å—Ç–æ—Å–æ–≤–∞–Ω–æ</i>\n"

    caption += "\n–û–ø–ª–∞—Ç–∞ –∑–¥—ñ–π—Å–Ω—é—î—Ç—å—Å—è –≥–æ—Ç—ñ–≤–∫–æ—é –≤–æ–¥—ñ—é –ø–æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—é –ø–æ—ó–∑–¥–∫–∏."

    photo = FSInputFile(map_path)
    await bot.send_photo(
        message.chat.id,
        photo,
        caption=caption,
        parse_mode="HTML"
    )

    if os.path.exists(map_path):
        os.remove(map_path)

    await state.clear()

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == "__main__":
    import asyncio
    asyncio.run(dp.start_polling(bot))