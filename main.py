import os
import logging
import openrouteservice
from dotenv import load_dotenv
from aiogram import Bot, Dispatcher, types
from aiogram.enums import ContentType
from aiogram.filters import Command
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, Message
import asyncio

# –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑–º—ñ–Ω–Ω–∏—Ö —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
load_dotenv()
ORS_API_KEY = os.getenv("ORS_API_KEY")
BOT_TOKEN = os.getenv("BOT_TOKEN")

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()
user_locations = {}

# –•–µ–Ω–¥–ª–µ—Ä /start
@dp.message(Command("start"))
async def send_welcome(message: Message):
    location_button = KeyboardButton(
        text="üìç –ù–∞–¥—ñ—Å–ª–∞—Ç–∏ –ª–æ–∫–∞—Ü—ñ—é",
        request_location=True
    )

    keyboard = ReplyKeyboardMarkup(
        keyboard=[[location_button]],
        resize_keyboard=True
    )

    await message.answer(
        "–ü—Ä–∏–≤—ñ—Ç! –ù–∞–¥—ñ—à–ª–∏ —Å–≤–æ—é –ª–æ–∫–∞—Ü—ñ—é, —â–æ–± –≤–∏–∫–ª–∏–∫–∞—Ç–∏ —Ç–∞–∫—Å—ñ üöï",
        reply_markup=keyboard
    )

# –•–µ–Ω–¥–ª–µ—Ä –ª–æ–∫–∞—Ü—ñ—ó
@dp.message(lambda message: message.location is not None)
async def handle_location(message: Message):
    lat = message.location.latitude
    lon = message.location.longitude
    user_locations[message.from_user.id] = (lat, lon)
    await message.answer("–õ–æ–∫–∞—Ü—ñ—é –æ—Ç—Ä–∏–º–∞–Ω–æ. –í–≤–µ–¥—ñ—Ç—å –∞–¥—Ä–µ—Å—É –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è")

# –•–µ–Ω–¥–ª–µ—Ä –∞–¥—Ä–µ—Å–∏
@dp.message()
async def handle_destination(message: Message):
    user_id = message.from_user.id
    if user_id not in user_locations:
        await message.answer("–°–ø–æ—á–∞—Ç–∫—É –Ω–∞–¥—ñ—à–ª—ñ—Ç—å –ª–æ–∫–∞—Ü—ñ—é üìç")
        return

    client = openrouteservice.Client(key=ORS_API_KEY)
    coords = [
        (user_locations[user_id][1], user_locations[user_id][0]),  # (lon, lat)
        message.text  # –°–ø—Ä–æ—â–µ–Ω–æ: —Ä–æ–∑–≥–ª—è–¥–∞—î—Ç—å—Å—è —Ç–µ–∫—Å—Ç —è–∫ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏
    ]

    try:
        route = client.directions(coords)
        distance = route['routes'][0]['summary']['distance'] / 1000
        await message.answer(f"–î–æ–≤–∂–∏–Ω–∞ –º–∞—Ä—à—Ä—É—Ç—É: {distance:.2f} –∫–º")
    except Exception as e:
        await message.answer(f"–ü–æ–º–∏–ª–∫–∞ –ø–æ–±—É–¥–æ–≤–∏ –º–∞—Ä—à—Ä—É—Ç—É: {e}")

# –°—Ç–∞—Ä—Ç –±–æ—Ç–∞
async def main():
    logging.basicConfig(level=logging.INFO)
    await dp.start_polling(bot)

if __name__== "__main__":
    asyncio.run(main())