import os
import json
import logging
import requests
from datetime import datetime
from aiogram import Bot, Dispatcher, types
from aiogram.types import (
    CallbackQuery,
    Message,
    FSInputFile,
    ReplyKeyboardMarkup,
    KeyboardButton,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
)
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.filters import CommandStart, StateFilter
from aiogram import F
from cd import calculate_price
from zoneinfo import ZoneInfo
from dotenv import load_dotenv

load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")
GOOGLE_MAPS_API_KEY = os.getenv("GOOGLE_MAPS_API_KEY")

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(storage=MemoryStorage())
logging.basicConfig(level=logging.INFO)


class RideStates(StatesGroup):
    waiting_for_phone = State()
    waiting_for_location = State()
    waiting_for_destination = State()
    waiting_for_waypoints = State()
    choosing_car_class = State()
    confirming_order = State()
    rating_driver = State


def load_users():
    if os.path.exists("users.json"):
        with open("users.json", "r", encoding="utf-8") as f:
            return json.load(f)
    return {}


def save_users(users):
    with open("users.json", "w", encoding="utf-8") as f:
        json.dump(users, f, ensure_ascii=False, indent=2)


def load_ratings():
    if os.path.exists("drivers_rating.json"):
        with open("drivers_rating.json", "r", encoding="utf-8") as f:
            return json.load(f)
    return {}


def save_ratings(ratings):
    with open("drivers_rating.json", "w", encoding="utf-8") as f:
        json.dump(ratings, f, ensure_ascii=False, indent=2)


def is_peak_time(now_kyiv):
    weekday = now_kyiv.weekday()
    time_str = now_kyiv.strftime("%H:%M")
    peak_periods = [
        ("05:00", "06:00"),
        ("07:30", "11:00"),
        ("16:30", "19:30"),
        ("21:30", "00:00"),
    ]
    weekend_peak = ("22:30", "00:00")
    if weekday in [4, 5, 6]:  # –ø'—è—Ç–Ω–∏—Ü—è, —Å—É–±–æ—Ç–∞, –Ω–µ–¥—ñ–ª—è
        if weekend_peak[0] <= time_str < weekend_peak[1]:
            return True, 2.0
    for start, end in peak_periods:
        if start <= time_str < end:
            return True, 1.5
    return False, 1.0


def is_curfew(now_kyiv):
    return now_kyiv.time() < datetime.strptime("05:00", "%H:%M").time()


users = load_users()
ratings = load_ratings()


@dp.message(CommandStart())
async def cmd_start(message: Message, state: FSMContext):
    user_id = str(message.from_user.id)
    now_kyiv = datetime.now(ZoneInfo("Europe/Kyiv"))
    if is_curfew(now_kyiv):
        await message.answer(
            "üö´ –°–µ—Ä–≤—ñ—Å —Ç–∏–º—á–∞—Å–æ–≤–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π —á–µ—Ä–µ–∑ –∫–æ–º–µ–Ω–¥–∞–Ω—Ç—Å—å–∫—É –≥–æ–¥–∏–Ω—É (00:00‚Äì05:00)."
        )
        return

    if user_id not in users:
        await state.set_state(RideStates.waiting_for_phone)
        kb = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        kb.add(KeyboardButton("üì± –ù–∞–¥—ñ—Å–ª–∞—Ç–∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É", request_contact=True))
        await message.answer(
            "–í–∞—Å –≤—ñ—Ç–∞—î —Ç–∞–∫—Å—ñ Fly!\n\n–©–æ–± –ø—Ä–æ–¥–æ–≤–∂–∏—Ç–∏, –Ω–∞–¥—ñ—à–ª—ñ—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É:",
            reply_markup=kb,
        )
    else:
        await message.answer(
            "üëã –í—ñ—Ç–∞—î–º–æ –∑–Ω–æ–≤—É!\n–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ, —â–æ–± —Ä–æ–∑–ø–æ—á–∞—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è.",
            reply_markup=ReplyKeyboardMarkup(resize_keyboard=True).add(
                KeyboardButton("üìç –ü–æ–¥—ñ–ª–∏—Ç–∏—Å—å –ª–æ–∫–∞—Ü—ñ—î—é", request_location=True)
            ),
        )
        await state.set_state(RideStates.waiting_for_location)


@dp.message(RideStates.waiting_for_phone, F.contact)
async def process_contact(message: Message, state: FSMContext):
    contact = message.contact
    user_id = str(message.from_user.id)
    users[user_id] = {
        "id": user_id,
        "name": message.from_user.full_name,
        "username": message.from_user.username,
        "phone_number": contact.phone_number,
    }
    save_users(users)
    await message.answer(
        "‚úÖ –ù–æ–º–µ—Ä –∑–±–µ—Ä–µ–∂–µ–Ω–æ.\n–¢–µ–ø–µ—Ä –Ω–∞–¥—ñ—à–ª—ñ—Ç—å –≤–∞—à—É –ª–æ–∫–∞—Ü—ñ—é:",
        reply_markup=ReplyKeyboardMarkup(resize_keyboard=True).add(
            KeyboardButton("üìç –ü–æ–¥—ñ–ª–∏—Ç–∏—Å—å –ª–æ–∫–∞—Ü—ñ—î—é", request_location=True)
        ),
    )
    await state.set_state(RideStates.waiting_for_location)


@dp.message(RideStates.waiting_for_location, F.location)
async def process_location(message: Message, state: FSMContext):
    latitude = message.location.latitude
    longitude = message.location.longitude
    await state.update_data(start_lat=latitude, start_lng=longitude)
    await message.answer(
        "üìç –í–∞—à–∞ —Ç–æ—á–∫–∞ A –∑–±–µ—Ä–µ–∂–µ–Ω–∞.\n\n–í–≤–µ–¥—ñ—Ç—å –∞–¥—Ä–µ—Å—É –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è (—Ç–æ—á–∫–∞ B):",
        reply_markup=types.ReplyKeyboardRemove(),
    )
    await state.set_state(RideStates.waiting_for_destination)


@dp.message(RideStates.waiting_for_destination, F.text)
async def process_destination(message: Message, state: FSMContext):
    destination = message.text
    await state.update_data(destination=destination)
    await message.answer(
        "üîÅ –•–æ—á–µ—Ç–µ –¥–æ–¥–∞—Ç–∏ –∑—É–ø–∏–Ω–∫–∏?\n–í–≤–µ–¥—ñ—Ç—å –¥–æ 5 –∞–¥—Ä–µ—Å –ø–æ —á–µ—Ä–∑—ñ –∞–±–æ –Ω–∞–ø–∏—à—ñ—Ç—å ¬´–ì–æ—Ç–æ–≤–æ¬ª."
    )
    await state.update_data(waypoints=[])
    await state.set_state(RideStates.waiting_for_waypoints)


@dp.message(RideStates.waiting_for_waypoints, F.text)
async def process_waypoints(message: Message, state: FSMContext):
    text = message.text.strip()
    data = await state.get_data()
    waypoints = data.get("waypoints", [])

    if text.lower() == "–≥–æ—Ç–æ–≤–æ":
        await state.update_data(waypoints=waypoints)
        await send_route_and_prices(message, state)
        return

    if len(waypoints) >= 5:
        await message.answer(
            "‚ùó –ú–∞–∫—Å–∏–º—É–º 5 –∑—É–ø–∏–Ω–æ–∫. –ù–∞–ø–∏—à—ñ—Ç—å ¬´–ì–æ—Ç–æ–≤–æ¬ª, —â–æ–± –ø—Ä–æ–¥–æ–≤–∂–∏—Ç–∏."
        )
        return

    waypoints.append(text)
    await state.update_data(waypoints=waypoints)
    await message.answer(
        f"‚úÖ –ó—É–ø–∏–Ω–∫–∞ –¥–æ–¥–∞–Ω–∞. –í—Å—å–æ–≥–æ –∑—É–ø–∏–Ω–æ–∫: {len(waypoints)}.\n\n–î–æ–¥–∞–π—Ç–µ —â–µ –∞–±–æ –Ω–∞–ø–∏—à—ñ—Ç—å ¬´–ì–æ—Ç–æ–≤–æ¬ª."
    )
async def send_route_and_prices(message: Message, state: FSMContext):
    data = await state.get_data()
    origin = f"{data['start_lat']},{data['start_lng']}"
    destination = data['destination']
    waypoints = data.get("waypoints", [])

    waypoint_param = ""
    if waypoints:
        waypoint_param = "&waypoints=" + "|".join(waypoints)

    directions_url = (
        f"https://maps.googleapis.com/maps/api/directions/json?"
        f"origin={origin}&destination={destination}"
        f"{waypoint_param}&key={GOOGLE_MAPS_API_KEY}&language=uk"
    )

    directions_response = requests.get(directions_url)
    directions = directions_response.json()

    if directions["status"] != "OK":
        await message.answer("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –ø–æ–±—É–¥—É–≤–∞—Ç–∏ –º–∞—Ä—à—Ä—É—Ç. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –∞–¥—Ä–µ—Å—É.")
        return

    route = directions["routes"][0]["legs"]
    polyline = directions["routes"][0]["overview_polyline"]["points"]

    total_distance_km = sum(leg["distance"]["value"] for leg in route) / 1000

    map_url = (
        f"https://maps.googleapis.com/maps/api/staticmap?"
        f"size=600x400&path=enc:{polyline}&key={GOOGLE_MAPS_API_KEY}"
    )

    map_image = requests.get(map_url)
    map_path = "route_map.png"
    with open(map_path, "wb") as f:
        f.write(map_image.content)

    now_kyiv = datetime.now(ZoneInfo("Europe/Kyiv"))
    is_peak, multiplier = is_peak_time(now_kyiv)
    is_alert = not is_peak and False  # –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è —Ç—Ä–∏–≤–æ–≥–∏ –º–æ–∂–ª–∏–≤–æ –ø—ñ–∑–Ω—ñ—à–µ

    standard_price = calculate_price(total_distance_km, "standard", is_peak, is_alert)
    comfort_price = calculate_price(total_distance_km, "comfort", is_peak, is_alert)
    business_price = calculate_price(total_distance_km, "business", is_peak, is_alert)

    await state.update_data(distance=total_distance_km,
                            is_peak=is_peak,
                            is_alert=is_alert)

    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=f"üöó –°—Ç–∞–Ω–¥–∞—Ä—Ç ‚Äì {standard_price}‚Ç¥", callback_data="car_standard")],
        [InlineKeyboardButton(text=f"üöô –ö–æ–º—Ñ–æ—Ä—Ç ‚Äì {comfort_price}‚Ç¥", callback_data="car_comfort")],
        [InlineKeyboardButton(text=f"üöò –ë—ñ–∑–Ω–µ—Å ‚Äì {business_price}‚Ç¥", callback_data="car_business")]
    ])

    await message.answer_photo(FSInputFile(map_path), caption="üó∫Ô∏è –û—Å—å –≤–∞—à –º–∞—Ä—à—Ä—É—Ç.\n\n –û–±–µ—Ä—ñ—Ç—å –∫–ª–∞—Å –∞–≤—Ç–æ:", reply_markup=kb)
    await state.set_state(RideStates.choosing_car_class)
    @dp.callback_query(RideStates.choosing_car_class, F.data.startswith("car_"))
    async def car_chosen(callback: CallbackQuery, state: FSMContext)
         
    car_class = callback.data.replace("car_", "")
    await state.update_data(car_class=car_class)
    await callback.message.answer("‚úÖ –ê–≤—Ç–æ –≤–∏–±—Ä–∞–Ω–æ.\n\n–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å ¬´–ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏¬ª, —â–æ–± –∑–∞–º–æ–≤–∏—Ç–∏ –ø–æ—ó–∑–¥–∫—É:",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚úÖ –ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è", callback_data="confirm_order")]
        ]))
    await state.set_state(RideStates.confirming_order)

@dp.callback_query(RideStates.confirming_order, F.data == "confirm_order")
async def confirm_order(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    price = calculate_price(data['distance'], data['car_class'], data['is_peak'], data['is_alert'])

    await callback.message.answer(
        f"üöñ –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ!\n\n"
        f"–ö–ª–∞—Å –∞–≤—Ç–æ: {data['car_class'].capitalize()}\n"
        f"–í–∞—Ä—Ç—ñ—Å—Ç—å: {price}‚Ç¥\n"
        f"–ú–∞—Ä—à—Ä—É—Ç: {round(data['distance'], 1)} –∫–º\n\n"
        f"üîÑ –Ø–∫—â–æ —Ö–æ—á–µ—Ç–µ –∑–º—ñ–Ω–∏—Ç–∏ —Ç–æ—á–∫—É –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è ‚Äî –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –Ω–∏–∂—á–µ.",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚úèÔ∏è –ó–º—ñ–Ω–∏—Ç–∏ –∞–¥—Ä–µ—Å—É", callback_data="change_address")],
            [InlineKeyboardButton(text="üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–∏", callback_data="restart")]
        ])
    )
    await state.set_state(RideStates.rating_driver)

@dp.callback_query(F.data == "change_address")
async def change_address(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer("‚úèÔ∏è –í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤—É –∞–¥—Ä–µ—Å—É –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è (—Ç–æ—á–∫—É B):")
    await state.set_state(RideStates.waiting_for_destination)

@dp.callback_query(F.data == "restart")
async def restart(callback: CallbackQuery, state: FSMContext):
    await state.clear()
    await callback.message.answer("üîÑ –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è —Å–∫–∞—Å–æ–≤–∞–Ω–æ.\n–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å /start, —â–æ–± –ø–æ—á–∞—Ç–∏ –∑–∞–Ω–æ–≤–æ.")
    @dp.message(RideStates.rating_driver, F.text.in_(["1", "2", "3", "4", "5"]))
@dp.message(RideStates.rating_driver, F.text.in_(["1", "2", "3", "4", "5"]))
async def rate_driver(message: Message, state: FSMContext):
    user_id = str(message.from_user.id)
    driver_id = "demo_driver_001"  # –£ —Ä–µ–∞–ª—å–Ω—ñ–π –≤–µ—Ä—Å—ñ—ó ‚Äî –ø—ñ–¥—Å—Ç–∞–≤–ª—è—î—Ç—å—Å—è ID –≤–æ–¥—ñ—è
    rating = int(message.text)

    driver = ratings.get(driver_id, {"total": 0, "count": 0, "history": []})
    driver["history"].append(rating)
    driver["count"] += 1
    driver["total"] += rating

    # –í–∏–¥–∞–ª—è—î–º–æ —Å—Ç–∞—Ä—É –ø–æ–≥–∞–Ω—É –æ—Ü—ñ–Ω–∫—É —á–µ—Ä–µ–∑ 100 –ø–æ—ó–∑–¥–æ–∫
    if len(driver["history"]) > 100:
        removed = driver["history"].pop(0)
        driver["total"] -= removed
        driver["count"] -= 1

    ratings[driver_id] = driver
    save_ratings(ratings)

    average = driver["total"] / driver["count"] if driver["count"] else 5.0
    await message.answer(f"‚úÖ –î—è–∫—É—î–º–æ –∑–∞ –æ—Ü—ñ–Ω–∫—É!\n–ü–æ—Ç–æ—á–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥ –≤–æ–¥—ñ—è: {average:.2f}‚≠êÔ∏è")

    await state.clear()
    await message.answer("üîÅ –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å /start, —â–æ–± –∑—Ä–æ–±–∏—Ç–∏ –Ω–æ–≤–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è.")
@dp.message(RideStates.rating_driver, F.text.in_(["1", "2", "3", "4", "5"]))
async def rate_driver(message: Message, state: FSMContext):
    user_id = str(message.from_user.id)
    driver_id = "demo_driver_001"  # –£ —Ä–µ–∞–ª—å–Ω—ñ–π –≤–µ—Ä—Å—ñ—ó ‚Äî –ø—ñ–¥—Å—Ç–∞–≤–ª—è—î—Ç—å—Å—è ID –≤–æ–¥—ñ—è
    rating = int(message.text)

    driver = ratings.get(driver_id, {"total": 0, "count": 0, "history": []})
    driver["history"].append(rating)
    driver["count"] += 1
    driver["total"] += rating

    if len(driver["history"]) > 100:
        removed = driver["history"].pop(0)
        driver["total"] -= removed
        driver["count"] -= 1

    ratings[driver_id] = driver
    save_ratings(ratings)

    average = driver["total"] / driver["count"] if driver["count"] else 5.0
    await message.answer(f"‚úÖ –î—è–∫—É—î–º–æ –∑–∞ –æ—Ü—ñ–Ω–∫—É!\n–ü–æ—Ç–æ—á–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥ –≤–æ–¥—ñ—è: {average:.2f}‚≠êÔ∏è")
    await state.clear()
    await message.answer("üîÅ –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å /start, —â–æ–± –∑—Ä–æ–±–∏—Ç–∏ –Ω–æ–≤–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è.")
    async def on_startup(dispatcher: Dispatcher):logging.info("üöÄ FlyTaxi –±–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ.")
def main():
    dp.startup.register(on_startup)
    import asyncio
    asyncio.run(dp.start_polling(bot))

if __name__ == "__main__":
    main()