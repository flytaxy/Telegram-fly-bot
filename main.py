from aiogram import Bot, Dispatcher, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.utils import executor
import logging
from dotenv import load_dotenv
import os
import openrouteservice

# –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑–º—ñ–Ω–Ω–∏—Ö –∑ .env
load_dotenv()

ORS_API_KEY = os.getenv("ORS_API_KEY")
BOT_TOKEN = os.getenv("BOT_TOKEN")

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–æ—Ç–∞
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(bot)
user_locations = {}

# –£–≤—ñ–º–∫–Ω–µ–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(level=logging.INFO)

# –û–±—Ä–æ–±–∫–∞ –∫–æ–º–∞–Ω–¥–∏ /start
@dp.message_handler(commands=["start"])
async def send_welcome(message: types.Message):
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
    location_button = KeyboardButton(text="üìç –ù–∞–¥—ñ—Å–ª–∞—Ç–∏ –ª–æ–∫–∞—Ü—ñ—é", request_location=True)
    keyboard.add(location_button)

    await message.answer(
        "–ü—Ä–∏–≤—ñ—Ç! –ù–∞–¥—ñ—à–ª–∏ —Å–≤–æ—é –ª–æ–∫–∞—Ü—ñ—é, —â–æ–± –≤–∏–∫–ª–∏–∫–∞—Ç–∏ —Ç–∞–∫—Å—ñ üöñüìç",
        reply_markup=keyboard
    )

# –û–±—Ä–æ–±–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–æ—ó –ª–æ–∫–∞—Ü—ñ—ó
@dp.message_handler(content_types=types.ContentType.LOCATION)
async def handle_location(message: types.Message):
    user_id = message.from_user.id
    latitude = message.location.latitude
    longitude = message.location.longitude

    user_locations[user_id] = {"lat": latitude, "lon": longitude}

    await message.answer(
        f"üìç–ú–∏ –æ—Ç—Ä–∏–º–∞–ª–∏ —Ç–≤–æ—é –ª–æ–∫–∞—Ü—ñ—é:\nüîΩ –®–∏—Ä–æ—Ç–∞: {latitude}\nüîº –î–æ–≤–≥–æ—Ç–∞: {longitude}\n\n"
        "–¢–µ–ø–µ—Ä –Ω–∞–¥—ñ—à–ª–∏ –∞–¥—Ä–µ—Å—É, –∫—É–¥–∏ —ó—Ö–∞—Ç–∏ üèÅ",
        reply_markup=types.ReplyKeyboardRemove()
    )

# –û–±—Ä–æ–±–∫–∞ –≤–≤–µ–¥–µ–Ω–æ—ó –∞–¥—Ä–µ—Å–∏ –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è
@dp.message_handler(content_types=types.ContentType.TEXT)
async def handle_destination(message: types.Message):
    user_id = message.from_user.id
    destination = message.text

    if user_id not in user_locations:
        await message.answer("–°–ø–æ—á–∞—Ç–∫—É –Ω–∞–¥—ñ—à–ª—ñ—Ç—å —Å–≤–æ—é –ª–æ–∫–∞—Ü—ñ—é üìç")
        return

    start = user_locations[user_id]

    await message.answer(f"üìç–ü—É–Ω–∫—Ç –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è: {destination}\n\n–û—á—ñ–∫—É–π—Ç–µ –∞–≤—Ç–æ, —Å–∫–æ—Ä–æ –ø—Ä–∏—ó–¥–µ! üòä")

    # –ü–æ–±—É–¥–æ–≤–∞ –º–∞—Ä—à—Ä—É—Ç—É
    def get_route(start_coords, end_coords):
        client = openrouteservice.Client(key=ORS_API_KEY)
        route = client.directions(
            coordinates=[start_coords, end_coords],
            profile='driving-car',
            format='geojson'
        )
        return route

    # –¢—É—Ç –±—É–¥–µ –≤–∏–∫–ª–∏–∫ OpenRouteService API ‚Äî –ø—ñ–∑–Ω—ñ—à–µ –¥–æ–¥–∞–º–æ –≥–µ–æ–∫–æ–¥—É–≤–∞–Ω–Ω—è
    # –ü–æ–∫–∏ —â–æ –ø—Ä–æ—Å—Ç–æ –≤–∏–≤–æ–¥–∏–º–æ –ø–æ—á–∞—Ç–∫–æ–≤—É —Ç–æ—á–∫—É
    await message.answer(
        f"üìå –í–∞—à –º–∞—Ä—à—Ä—É—Ç:\nüü¢ –ü–æ—á–∞—Ç–∫–æ–≤–∞ —Ç–æ—á–∫–∞: {start['lat']}, {start['lon']}\n"
        f"üèÅ –ü—É–Ω–∫—Ç –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è: {destination}"
    )

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if name == "main":
    executor.start_polling(dp, skip_updates=True)